import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;

import org.omg.CORBA.portable.OutputStream;
//Thread 활용
public class server3 {

	public static void main(String[] args) {
		server3 sv = new server3();
		sv.start();
	}
	//소켓을 오픈하는 역할 (접속환경)
	public void start() {
		ServerSocket serverSocket =  null;
		Socket socket = null;
		try {
			serverSocket = new ServerSocket(8000);
			System.out.println("[채팅서버 오픈]");
			while(true){
				socket = serverSocket.accept();
				//Client 접속 새로운 스레드 생성
				chatroom chatroom = new chatroom(socket);
				chatroom.start();
			}
		}
		catch(Exception e) {
			System.out.println("Thread 오류발생!!");
		}
		finally { //소켓통신 오류발생 후 처리하는 방식
			if(serverSocket != null) {
				try { 
					serverSocket.close();
					System.out.println("서버를 강제 종료 합니다.");
				}
				catch(Exception e) {
					System.out.println("서버 소켓이 완전 오류 발생");
					System.exit(0);
				}
			}
		}
	}
}

//접속자 현황을 셋팅해서 Thread로 관리

class chatroom extends Thread{
	InputStream is = null;
	OutputStream os = null;
	Socket socket = null;
	BufferedReader  in = null;
	PrintWriter out = null;
	//서버 메모리에 사용자 리스트를 저장하는 공감
	static List<PrintWriter> list = new ArrayList<PrintWriter>();
	
	//즉시실행
	public chatroom(Socket socket) {
		this.socket = socket;
		try {
		this.out = new PrintWriter(this.socket.getOutputStream());
		this.in = new BufferedReader(new InputStreamReader(this.socket.getInputStream()));
		this.list.add(out);
		}
		catch(Exception e) {
			System.out.println("소켓통신 오류!!");
		}
	}
	
	//스레드 실행
	@Override
	public void run() {
		String name = "";
		try {
			name = this.in.readLine();
			System.out.println("["+name+"]");
			sendAll("["+name+"] Welcome");
			while(this.in !=null) {
				String inputmsg = this.in.readLine();
				if(inputmsg=="exit") {
					break;
				}
				else {
					sendAll("["+name+"]" +inputmsg);
				}
			}
		}
		catch(Exception e) {
			System.out.println("["+name+"Error!!]");
		}
		finally {
			sendAll("["+name+"] Chatting Out!!");
			this.list.remove(out);
			try {
			}
			catch(Exception e) {
				
			}
		}
	}
	
	//사용자 정보가 있는 배열을 이용하여 메세지 출력
	private void sendAll(String s) {
		for(PrintWriter out:this.list) {
			out.println(s);
			out.flush();
		}
	}
}
