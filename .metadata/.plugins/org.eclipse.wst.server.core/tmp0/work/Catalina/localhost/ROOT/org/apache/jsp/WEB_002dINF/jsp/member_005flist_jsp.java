/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.85
 * Generated at: 2023-09-08 09:01:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;
import java.util.List;

public final class member_005flist_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	");

	int total = (int)request.getAttribute("total"); 
	
	List<ArrayList<String>> member_data= (List<ArrayList<String>>)request.getAttribute("member_data");
	
	int many = member_data.size();
	String part = (String)request.getAttribute("part");

	//out.print(part);
	// null 값을 조건에서 1순위로 체크 후 그리고 해당 데이터를 어떻게 처리할지를 코드를 작성
	String s = null;
	if(part != null && part.equals("tel")  ){
		s ="selected";
	}
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>고객 리스트 페이지</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<p>회원가입 고객 리스트 가입자 수  : ");
      out.print(total);
      out.write("명</p>\r\n");
      out.write("<table border=\"1\" width=\"1000\">\r\n");
      out.write("<thead>\r\n");
      out.write("	<tr>\r\n");
      out.write("	<th width=\"5%\">번호</th>\r\n");
      out.write("	<th width=\"20%\">아이디</th>\r\n");
      out.write("	<th width=\"30%\">이메일</th>\r\n");
      out.write("	<th width=\"20%\">연락처</th>\r\n");
      out.write("	<th width=\"5%\">나이</th>\r\n");
      out.write("	<th width=\"20%\">가입일자</th>\r\n");
      out.write("	</tr>\r\n");
      out.write("</thead>\r\n");
      out.write("<tbody>\r\n");
      out.write("<!-- database의 내용이 출력되는 파트 -->\r\n");
      out.write("<!-- 배열값 중 첫번째 아이디 값을 확인하여 값이 없을 경우에 대한 조건 -->\r\n");
 if(member_data.get(0).get(1)== ""){ 
      out.write("\r\n");
      out.write("<tr align=\"center\">\r\n");
      out.write("<td colspan=\"6\">검색한 내용을 찾을 수 없습니다.</td>\r\n");
      out.write("</tr>\r\n");
      out.write("	");

}
else{
		int w =0 ;
		do{
	
      out.write("\r\n");
      out.write("		<tr align=\"center\">\r\n");
      out.write("			<td>");
      out.print(total);
      out.write("</td>\r\n");
      out.write("			<td>");
      out.print(member_data.get(w).get(1));
      out.write("</td>\r\n");
      out.write("			<td>");
      out.print(member_data.get(w).get(2));
      out.write("</td>\r\n");
      out.write("			<td>");
      out.print(member_data.get(w).get(3));
      out.write("</td>\r\n");
      out.write("			<td>");
      out.print(member_data.get(w).get(4));
      out.write("</td>\r\n");
      out.write("			<td>");
      out.print(member_data.get(w).get(5).substring(0,10));
      out.write("</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("	");

		w++;
		} while(w < many);
}

      out.write("\r\n");
      out.write("</tbody>\r\n");
      out.write("</table>\r\n");
      out.write("<br><br>\r\n");
      out.write("<form id=\"f\" method=\"get\" action=\"./spring6ok.do\" onsubmit=\"return idsearch()\"> <!-- 검색은 get으로 -->\r\n");
      out.write("검색 : \r\n");
      out.write("<!-- 검색시 분류 설정을 하여 검색이 되도록 함 -->\r\n");
      out.write("<select name=\"part\">\r\n");
      out.write("<option value=\"id\" selected>아이디</option>\r\n");
      out.write("<option value=\"tel\" ");
      out.print(s);
      out.write(">연락처</option>\r\n");
      out.write("</select>\r\n");
      out.write("<input type=\"text\" name=\"search\">\r\n");
      out.write("<input type=\"submit\" value=\"검색\">\r\n");
      out.write("<input type=\"button\" value=\"전체목록\" onclick=\"alldata()\">\r\n");
      out.write("</form>\r\n");
      out.write("</body>\r\n");
      out.write("<script>\r\n");
      out.write("//검색한 단어를 유지시키는 스크립트코드\r\n");
      out.write("var wd = window.location.search;\r\n");
      out.write("var sh =wd.split(\"&search=\");\r\n");
      out.write("f.search.value = sh[1];\r\n");
      out.write("\r\n");
      out.write("//console.log(data);\r\n");
      out.write("//document.getElementById(\"search\").innerHTML =data2[1];\r\n");
      out.write("//document.getElementById(\"cate\").innerHTML =data[1];\r\n");
      out.write("\r\n");
      out.write("if(f.search.value==\"undefined\"){\r\n");
      out.write("	f.search.value = \"\";\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function alldata(){\r\n");
      out.write("	location.href=\"./spring6ok.do\";\r\n");
      out.write("}\r\n");
      out.write("function idsearch(){\r\n");
      out.write("	//입력에 따른 공백을 제거 후 조건문으로 재확인\r\n");
      out.write("	f.search.value = f.search.value.replaceAll(\" \",\"\");\r\n");
      out.write("	if(f.search.value==\"\"){\r\n");
      out.write("		alert(\"검색할 단어를 입력하세요!!\");\r\n");
      out.write("		return false;\r\n");
      out.write("	}\r\n");
      out.write("	else{\r\n");
      out.write("		return;\r\n");
      out.write("	}\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
